39. Combination Sum

Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]



class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        if(candidates == null || candidates.length == 0) {
            return results;
        }
        Arrays.sort(candidates);
        List<Integer> comb = new ArrayList<>();
        helper(candidates, target, 0, comb, results);
        return results;
    }
    
    private void helper(int[] arr, int remainTarget, int startIdx, List<Integer> comb, List<List<Integer>> results) {
        if(remainTarget == 0) {
            results.add(new ArrayList<>(comb));
        }
        for(int i = startIdx; i < arr.length; i++) {
            if(arr[i] > remainTarget) {
                break;
            }
            comb.add(arr[i]);
            helper(arr, remainTarget - arr[i], i, comb, results);
            comb.remove(comb.size() - 1);
        }
    }
}
