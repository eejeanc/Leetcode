Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
A single node tree is a BST
Have you met this question in a real interview? 
Example
An example:

  2
 / \
1   4
   / \
  3   5
The above binary tree is serialized as {2,1,4,#,#,3,5} (in level order).

Code:

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    public class ResultType {
        int min;
        int max;
        boolean isBST;
        public ResultType(int min, int max, boolean isBST) {
            this.min = min;
            this.max = max;
            this.isBST = isBST;
        }
    }
    
    public boolean isValidBST(TreeNode root) {
        // write your code here
        ResultType result = helper(root);
        return result.isBST;
    }
    
    private ResultType helper(TreeNode node) {
        if(node == null) {
            // 返回空result时，min要给出MAX_VALUE, max 要给出MIN_VALUE！！！
            return new ResultType(Integer.MAX_VALUE, Integer.MIN_VALUE, true);
        }
        
        // 不需要对叶子节点单独进行处理，因为下面code已经包含了对叶子节点的处理

        ResultType left = helper(node.left);
        ResultType right = helper(node.right);
        
        if(!left.isBST || !right.isBST) {
            return new ResultType(0, 0, false);
        }
        // 这里对node.left and node.right是否非空的判断非常重要！！！
        if(node.left != null && left.max >= node.val) {
            return new ResultType(0, 0, false);
        }
        if(node.right != null && right.min <= node.val) {
            return new ResultType(0, 0, false);
        }
        return new ResultType(Math.min(left.min, node.val), Math.max(right.max, node.val), true);
    }
}  
