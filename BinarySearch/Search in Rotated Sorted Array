62. Search in Rotated Sorted Array

Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Example
For [4, 5, 1, 2, 3] and target=1, return 2.

For [4, 5, 1, 2, 3] and target=0, return -1.

分析：
这道题跟普通二分法查找的区别在于它将序列变成不是纯粹递增了，所以我们在解法里面增加了一个pivot = num[end],
然后再比较。
注意点：
1. 解题时画图会将问题变得可视化，降低难度
2. 一个要点是只有pivot 和mid 在target同一边的时候（即都比target大或者比target小），再比较pivot和mid处的数值，来判断target到底
在左边还是右边
3. 循环条件是 start ＋ 1 < end, 所以while循环外面要对start和end处元素跟target做个比较，如果都不行，最后return －1

Code：

public class Solution {
    /*
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        // write your code here
        if(A == null || A.length == 0) {
            return -1;
        }
        int n = A.length;
        int start = 0, end = n - 1;
        int pivot = A[end];
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(pivot < target) {
                // 比较的时候是pivot跟mid元素值跟target是同一方向
                // (即都比target小或者都比target大)再根据pivot值
                // 和mid元素值的大小确定迭代start或者end
                if(A[mid] <= target && A[mid] > pivot) {
                    start = mid;
                }
                else {
                    end = mid;
                }
            }
            else if(pivot >= target) {
                if(A[mid] >= target && A[mid] < pivot) {
                    end = mid;
                }
                else {
                    start = mid;
                }
            }
        }
        if(A[start] == target) {
            return start;
        }
        if(A[end] == target) {
            return end;
        }
        return -1;
    }
}
